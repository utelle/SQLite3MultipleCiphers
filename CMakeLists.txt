cmake_minimum_required(VERSION 3.24.0.0)
project(sqlite3mc)

set(_SQLITE3MC_REQUIRE_ZLIB OFF)

OPTION(SQLITE3MC_STATIC_RUNTIME_LINK "Link the c++ runtime statically" OFF)
OPTION(SQLITE3MC_STATIC "Build SQLITE3MC as a static library" OFF)
OPTION(SQLITE3MC_BUILD_SHELL "Builds the SQLITE3MC Shell" ON)
OPTION(SQLITE3MC_WITH_ICU "Builds SQLITE3MC with the ICU library. Will use the FindICU function to locate the library. (https://cmake.org/cmake/help/latest/module/FindICU.html)" OFF)

OPTION(SQLITE_ENABLE_DEBUG "" OFF)
OPTION(SQLITE_THREADSAFE "" ON)
OPTION(SQLITE_DQS "" OFF)
OPTION(SQLITE_ENABLE_EXPLAIN_COMMENTS "" ON)
OPTION(SQLITE_SOUNDEX "" ON)
OPTION(SQLITE_ENABLE_COLUMN_METADATA "" ON)
OPTION(SQLITE_SECURE_DELETE "" ON)
OPTION(SQLITE_ENABLE_DESERIALIZE "" ON)
OPTION(SQLITE_ENABLE_FTS3 "" ON)
OPTION(SQLITE_ENABLE_FTS3_PARENTHESIS "" ON)
OPTION(SQLITE_ENABLE_FTS4 "" ON)
OPTION(SQLITE_ENABLE_FTS5 "" ON)
OPTION(SQLITE_ENABLE_JSON1 "" ON)
OPTION(SQLITE_ENABLE_RTREE "" ON)
OPTION(SQLITE_ENABLE_GEOPOLY "" ON)
OPTION(SQLITE_CORE "" ON)
OPTION(SQLITE_ENABLE_EXTFUNC "" ON)
OPTION(SQLITE_ENABLE_CSV "" ON)
OPTION(SQLITE_ENABLE_CARRAY "" ON)
OPTION(SQLITE_ENABLE_SERIES "" ON)
OPTION(SQLITE_ENABLE_UUID "" ON)
OPTION(SQLITE_ENABLE_REGEXP "" ON)
OPTION(SQLITE_TEMP_STORE "" ON)
OPTION(SQLITE_USE_URI "" ON)
OPTION(SQLITE_USER_AUTHENTICATION "" ON)
OPTION(SQLITE_ENABLE_DBPAGE_VTAB "" ON)
OPTION(SQLITE_ENABLE_DBSTAT_VTAB "" ON)
OPTION(SQLITE_ENABLE_STMTVTAB "" ON)
OPTION(SQLITE_ENABLE_UNKNOWN_SQL_FUNCTION "" ON)
OPTION(SQLITE_ENABLE_PREUPDATE_HOOK "" ON)
OPTION(SQLITE_SHELL_IS_UTF8 "" ON)

#Embedded Compression
OPTION(SQLITE3MC_USE_MINIZ "" OFF)

#Compression/Options that require ZLIB
OPTION(SQLITE_ENABLE_COMPRESS "" OFF)
OPTION(SQLITE_ENABLE_SQLAR "" OFF)
OPTION(SQLITE_ENABLE_ZIPFILE "" OFF)

#Legacy Encryption Extensions
OPTION(SQLITE3MC_USE_SQLEET_LEGACY "" OFF)
OPTION (SQLITE3MC_USE_SQLCIPHER_LEGACY "" OFF)

#TCL
OPTION(SQLITE_ENABLE_TCL "" OFF)

if(NOT DEFINED SQLITE_MAX_ATTACHED)
set(SQLITE_MAX_ATTACHED 10)
endif()

if(NOT DEFINED CODEC_TYPE)
set(CODEC_TYPE CODEC_TYPE_CHACHA20)
endif()

if(CODEC_TYPE STREQUAL "AES128")
set(CODEC_TYPE CODEC_TYPE_AES128)
endif()

if(CODEC_TYPE STREQUAL "AES256")
set(CODEC_TYPE CODEC_TYPE_AES256)
endif()

if(CODEC_TYPE STREQUAL "CHACHA20")
set(CODEC_TYPE CODEC_TYPE_CHACHA20)
endif()

if(CODEC_TYPE STREQUAL "RC4")
set(CODEC_TYPE CODEC_TYPE_RC4)
endif()

if(SQLITE_ENABLE_COMPRESS OR SQLITE_ENABLE_SQLAR OR SQLITE_ENABLE_ZIPFILE)
set(_SQLITE3MC_REQUIRE_ZLIB ON)
endif()

#setup the options
set(SQLITE3MC_BASE_DEFINITIONS 
    SQLITE_SHELL_IS_UTF8=$<BOOL:${SQLITE_SHELL_IS_UTF8}>
    SQLITE_USER_AUTHENTICATION=$<BOOL:${SQLITE_USER_AUTHENTICATION}>
    CODEC_TYPE=${CODEC_TYPE}
    SQLITE_ENABLE_DEBUG=$<BOOL:${SQLITE_ENABLE_DEBUG}>
    SQLITE_THREADSAFE=$<BOOL:${SQLITE_THREADSAFE}>
    SQLITE_DQS=$<BOOL:${SQLITE_DQS}>
    SQLITE_MAX_ATTACHED=${SQLITE_MAX_ATTACHED}
    SQLITE_ENABLE_EXPLAIN_COMMENTS=$<BOOL:${SQLITE_ENABLE_EXPLAIN_COMMENTS}>
    SQLITE_SOUNDEX=$<BOOL:${SQLITE_SOUNDEX}>
    SQLITE_ENABLE_COLUMN_METADATA=$<BOOL:${SQLITE_ENABLE_COLUMN_METADATA}>
    SQLITE_SECURE_DELETE=$<BOOL:${SQLITE_SECURE_DELETE}>
    SQLITE_ENABLE_DESERIALIZE=$<BOOL:${SQLITE_ENABLE_DESERIALIZE}>
    SQLITE_ENABLE_FTS3=$<BOOL:${SQLITE_ENABLE_FTS3}>
    SQLITE_ENABLE_FTS3_PARENTHESIS=$<BOOL:${SQLITE_ENABLE_FTS3_PARENTHESIS}>
    SQLITE_ENABLE_FTS4=$<BOOL:${SQLITE_ENABLE_FTS4}>
    SQLITE_ENABLE_FTS5=$<BOOL:${SQLITE_ENABLE_FTS5}>
    SQLITE_ENABLE_JSON1=$<BOOL:${SQLITE_ENABLE_JSON1}>
    SQLITE_ENABLE_RTREE=$<BOOL:${SQLITE_ENABLE_RTREE}>
    SQLITE_ENABLE_GEOPOLY=$<BOOL:${SQLITE_ENABLE_GEOPOLY}>
    SQLITE_CORE=$<BOOL:${SQLITE_CORE}>
    SQLITE_ENABLE_EXTFUNC=$<BOOL:${SQLITE_ENABLE_EXTFUNC}>
    SQLITE_ENABLE_CSV=$<BOOL:${SQLITE_ENABLE_CSV}>
    SQLITE_ENABLE_CARRAY=$<BOOL:${SQLITE_ENABLE_CARRAY}>
    SQLITE_ENABLE_SERIES=$<BOOL:${SQLITE_ENABLE_SERIES}>
    SQLITE_ENABLE_UUID=$<BOOL:${SQLITE_ENABLE_UUID}>
    SQLITE_ENABLE_REGEXP=$<BOOL:${SQLITE_ENABLE_REGEXP}>
    SQLITE_TEMP_STORE=$<BOOL:${SQLITE_TEMP_STORE}>
    SQLITE_USE_URI=$<BOOL:${SQLITE_USE_URI}>
    SQLITE_USER_AUTHENTICATION=$<BOOL:${SQLITE_USER_AUTHENTICATION}>
    SQLITE_ENABLE_DBPAGE_VTAB=$<BOOL:${SQLITE_ENABLE_DBPAGE_VTAB}>
    SQLITE_ENABLE_DBSTAT_VTAB=$<BOOL:${SQLITE_ENABLE_DBSTAT_VTAB}>
    SQLITE_ENABLE_STMTVTAB=$<BOOL:${SQLITE_ENABLE_STMTVTAB}>
    SQLITE_ENABLE_UNKNOWN_SQL_FUNCTION=$<BOOL:${SQLITE_ENABLE_UNKNOWN_SQL_FUNCTION}>
    SQLITE_ENABLE_PREUPDATE_HOOK=$<BOOL:${SQLITE_ENABLE_PREUPDATE_HOOK}>
    SQLITE3MC_USE_MINIZ=$<BOOL:${SQLITE3MC_USE_MINIZ}>
)
#TCL is touchy, don't define it - even 0 if it's not provided on the command line
if(SQLITE_USE_TCL)
set(SQLITE3MC_BASE_DEFINITIONS
    ${SQLITE3MC_BASE_DEFINITIONS}
    SQLITE_USE_TCL=1
)
endif()

set(SQLITE3MC_SHELL_DEFINITIONS 
    SQLITE_SHELL_IS_UTF8=$<BOOL:${SQLITE_SHELL_IS_UTF8}>
    SQLITE_USER_AUTHENTICATION=$<BOOL:${SQLITE_USER_AUTHENTICATION}>
)


if(SQLITE3MC_USE_SQLEET_LEGACY)
    set(SQLITE3MC_BASE_DEFINITIONS 
        ${SQLITE3MC_BASE_DEFINITIONS}
        SQLITE3MC_USE_SQLEET_LEGACY=1
    )
else()
    if(SQLITE3MC_USE_SQLCIPHER_LEGACY)
        if(NOT DEFINED SQLCIPHER_VERSION_DEFAULT)
        set(SQLCIPHER_VERSION_DEFAULT 4)
        endif()
        set(SQLITE3MC_BASE_DEFINITIONS 
            ${SQLITE3MC_BASE_DEFINITIONS}
            SQLITE3MC_USE_SQLCIPHER_LEGACY=1
            SQLCIPHER_VERSION_DEFAULT=${SQLCIPHER_VERSION_DEFAULT}
        )
    endif()
endif()

if(_SQLITE3MC_REQUIRE_ZLIB)
#Use ZLIB_ROOT to specify the location to look
find_package(ZLIB)
if(ZLIB_FOUND)
set(SQLITE3MC_BASE_DEFINITIONS 
    ${SQLITE3MC_BASE_DEFINITIONS}
    SQLITE_ENABLE_COMPRESS=$<BOOL:${SQLITE_ENABLE_COMPRESS}>
    SQLITE_ENABLE_SQLAR=$<BOOL:${SQLITE_ENABLE_SQLAR}>
    SQLITE_ENABLE_ZIPFILE=$<BOOL:${SQLITE_ENABLE_ZIPFILE}>
)
else()
message( FATAL_ERROR "One of the flags specified requires zlib. Zlib is not found. Try specifying the ZLIB_ROOT environment variable.")
endif()
endif()


# Helper macro
macro(_Enable_MT _target)
    target_compile_options(${_target} PRIVATE
        $<$<CONFIG:Release>:/MT>$<$<CONFIG:Debug>:/MTd>
    )
endmacro()

# Only generate Debug and Release configuration types.
set(CMAKE_CONFIGURATION_TYPES Debug Release)

set(SQLITE3MC_BASE_SRCS
    src/sqlite3mc.c
    src/cipher_common.h
    src/cipher_config.h
    src/fastpbkdf2.h
    src/mystdint.h
    src/rijndael.h
    src/sha1.h
    src/sha2.h
    src/sqlite3.h
    src/sqlite3ext.h
    src/sqlite3mc.h
    src/sqlite3mc_vfs.h
    src/sqlite3userauth.h
    src/test_windirent.h
)
set(SQLITE3MC_DLLRES_SRCS
    src/sqlite3mc.def
    src/sqlite3mc.rc
)
set(SQLITE3MC_SHELL_SRCS
    src/shell.c
    src/sqlite3mc.c
    src/sqlite3mc_shell.rc
)

set(SQLITE3MC_INCLUDEDIRS
    src
)

set(SQLITE3MC_LINK_LIBRARIES )

set(SQLITE3MC_DLL_DEFINITIONS )

set(SQLTE3MC_SHELL_SYSTEM_LINKS )

if(MSVC)
set(SQLITE3MC_DLL_DEFINITIONS
    _USRDLL
)

set(SQLTE3MC_SHELL_SYSTEM_LINKS
    kernel32.lib
    user32.lib
    gdi32.lib
    winspool.lib
    comdlg32.lib
    advapi32.lib
    shell32.lib
    ole32.lib
    oleaut32.lib
    uuid.lib
    odbc32.lib
    odbccp32.lib
)
endif()

if(SQLITE3MC_WITH_ICU)
find_package(ICU REQUIRED COMPONENTS data i18n io uc)
if(ICU_FOUND)
set(SQLITE3MC_ICU_DEFINITIONS
    SQLITE_ENABLE_ICU=1
)
else()
message("ICU not found.")
endif()
endif()


if (CMAKE_SYSTEM_NAME STREQUAL "Linux")
set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -msse4.2 -maes")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -msse4.2 -maes")
set(SQLITE3MC_LINK_LIBRARIES
    pthread
    m
)
endif()

if(CMAKE_SYSTEM_NAME STREQUAL "Darwin")
set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -msse4.2 -maes")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -msse4.2 -maes")
set(SQLITE3MC_LINK_LIBRARIES
    pthread
    m
)
endif()

set(_LIB_DIFINITIONS
    _LIB
)

set(_DEFAULT_DEFINITIONS
    _CRT_SECURE_NO_WARNINGS
    _CRT_SECURE_NO_DEPRECATE
    _CRT_NONSTDC_NO_WARNINGS
    _CRT_NONSTDC_NO_DEPRECATE
    _UNICODE
    UNICODE
)

set(SQLITE3MC_TARGET "sqlite3mc")
set(SQLIT3MC_SHELL_TARGET "sqlite3mc_shell")

set(SQLITE3MC_LINK "SHARED")

if(SQLITE3MC_STATIC)
set(SQLITE3MC_LINK "STATIC")
set(SQLITE3MC_TARGET "sqlite3mc_static")
endif()



#Lib Project
add_library(${SQLITE3MC_TARGET} ${SQLITE3MC_LINK}
    ${SQLITE3MC_BASE_SRCS}
)
target_include_directories(${SQLITE3MC_TARGET} PRIVATE
    ${SQLITE3MC_INCLUDEDIRS}
)
target_compile_definitions(${SQLITE3MC_TARGET} PRIVATE
    ${_LIB_DIFINITIONS}
    ${_DEFAULT_DEFINITIONS}
    ${SQLITE3MC_BASE_DEFINITIONS}
)
target_link_libraries(${SQLITE3MC_TARGET} PRIVATE
    ${SQLITE3MC_LINK_LIBRARIES}
)
if(ZLIB_FOUND)
target_include_directories(${SQLITE3MC_TARGET} PRIVATE
    ${ZLIB_INCLUDE_DIRS}
)
target_link_libraries(${SQLITE3MC_TARGET} PRIVATE
    ${ZLIB_LIBRARIES}
)
message(${ZLIB_LIBRARIES})
endif()

if(SQLITE3MC_WITH_ICU)
target_compile_definitions(${SQLITE3MC_TARGET} PRIVATE
    ${SQLITE3MC_ICU_DEFINITIONS}
)
target_include_directories(${SQLITE3MC_TARGET} PRIVATE 
    ${ICU_INCLUDE_DIRS}
)
target_link_libraries(${SQLITE3MC_TARGET} PRIVATE
    ${ICU_LIBRARIES}
)
message("Will build ${SQLITE3MC_TARGET} with ICU")
endif()

if(SQLITE3MC_STATIC_RUNTIME_LINK)
message("Will build ${SQLITE3MC_TARGET} with static runtime link")
_Enable_MT(${SQLITE3MC_TARGET})
endif()
message("Will build ${SQLITE3MC_TARGET} as ${SQLITE3MC_LINK}")


if(SQLITE3MC_BUILD_SHELL)

# Shell Executable project
add_executable(${SQLIT3MC_SHELL_TARGET}
    ${SQLITE3MC_SHELL_SRCS}
)
target_include_directories(${SQLIT3MC_SHELL_TARGET} PRIVATE
    ${SQLITE3MC_INCLUDEDIRS}
)
target_compile_definitions(${SQLIT3MC_SHELL_TARGET} PRIVATE
    ${_DEFAULT_DEFINITIONS}
    ${SQLITE3MC_SHELL_DEFINITIONS}
)
target_link_libraries(${SQLIT3MC_SHELL_TARGET} PRIVATE
    ${SQLITE3MC_TARGET}
    ${SQLTE3MC_SHELL_SYSTEM_LINKS}
    ${SQLITE3MC_LINK_LIBRARIES}
)
if(ZLIB_FOUND)
target_include_directories(${SQLIT3MC_SHELL_TARGET} PRIVATE
    ${ZLIB_INCLUDE_DIRS}
)
target_link_libraries(${SQLIT3MC_SHELL_TARGET} PRIVATE
    ${ZLIB_LIBRARIES}
)
endif()

if(SQLITE3MC_WITH_ICU)
target_compile_definitions(${SQLIT3MC_SHELL_TARGET} PRIVATE
    ${SQLITE3MC_ICU_DEFINITIONS}
)
target_include_directories(${SQLIT3MC_SHELL_TARGET} PRIVATE 
    ${ICU_INCLUDE_DIRS}
)
target_link_libraries(${SQLIT3MC_SHELL_TARGET} PRIVATE
    ${ICU_LIBRARIES}
)
message("Will build ${SQLIT3MC_SHELL_TARGET} with ICU")
endif()

if(SQLITE3MC_RUNTIME_LINK)
message("Will build ${SQLIT3MC_SHELL_TARGET} with static runtime")
_Enable_MT(${SQLIT3MC_SHELL_TARGET})
endif()
message("Will build ${SQLIT3MC_SHELL_TARGET}")
endif()